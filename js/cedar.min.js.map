{"version":3,"file":"cedar.min.js","sources":["../../src/cedar.js"],"names":["factory","define","amd","vg","d3","module","exports","require","window","Cedar","options","self","this","opts","width","undefined","height","_events","_definition","_defaultDefinition","_view","_methodQueue","_pendingXhr","definition","Error","getJson","err","data","_purgeMethodQueue","override","specification","dataset","query","_mixin","_defaultQuery","Object","defineProperty","get","set","val","prototype","canDraw","drawable","errs","show","_addToMethodQueue","elementId","select","_elementId","_renderer","renderer","token","_token","chk","issues","join","update","emit","_remove","compiledMappings","_applyDefaultsToMappings","mappings","inputs","queryFromSpec","JSON","parse","_supplant","stringify","spec","template","_mergeRecursive","url","values","_renderSpec","_createFeatureServiceRequest","cb","console","dir","ex","chartCtor","el","parseInt","style","_attach","opt","view","items","model","scene","forEach","item","datum","attributes","key","value","hasPropertySet","props","clearSelection","eventName","_handler","_handlers","handler","on","off","_validateMappings","input","missingInputs","i","length","required","name","push","_validateData","features","Array","isArray","firstRow","fld","_getMappingFieldName","field","hasOwnProperty","mappingName","fieldName","defn","defaultQuery","where","returnGeometry","returnDistinctValues","returnIdsOnly","returnCountOnly","outFields","f","evtName","evt","registeredHandler","type","callback","log","args","method","action","apply","json","message","source","arguments","entries","p","mergedQuery","bbox","geometry","bboxArr","split","xmin","ymin","xmax","ymax","inSR","groupByFieldsForStatistics","group","outStatistics","count","orderByFields","statisticType","onStatisticField","outStatisticFieldName","sort","_serializeQueryParams","tmpl","params","replace","a","b","r","_getTokenValue","obj1","obj2","constructor","e","tokens","tokenName","tmpTokens","tokenNameParts","str","encodeURIComponent","queryString"],"mappings":"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","sourcesContent":["/**\r\n * Cedar\r\n *\r\n * Generic charting / visualization library for the ArcGIS Platform\r\n * that leverages vega + d3 internally.\r\n */\r\n\r\n(function (factory) {\r\n  'use strict';\r\n  //define an AMD module that relies on 'vega'\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['vega', 'd3'], function (vg, d3) {\r\n      return factory(vg, d3);\r\n    });\r\n  //define a common js module that relies on 'vega'\r\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\r\n    module.exports = factory(require('vega'), require('d3'));\r\n  }\r\n\r\n  if (typeof window !== 'undefined' && window.vg && window.d3) {\r\n    window.Cedar = factory(window.vg, window.d3);\r\n  }\r\n} (function (vg, d3) {\r\n  'use strict';\r\n\r\n/**\r\n * Constructor\r\n * @param {object} options Cedar options\r\n */\r\nvar Cedar = function Cedar(options){\r\n  //close over this for use in callbacks\r\n  var self = this;\r\n\r\n  //ensure an opts object\r\n  var opts = options || {};\r\n\r\n  /**\r\n   * Internals for holding state\r\n   */\r\n\r\n  // Cedar configuration such as size\r\n  this.width = undefined;\r\n  this.height = undefined;\r\n\r\n  // Array to hold event handlers\r\n  this._events = [];\r\n\r\n  //initialize the internal definition hash\r\n  this._definition = Cedar._defaultDefinition();\r\n\r\n  //the vega view aka the chart\r\n  this._view = undefined;\r\n\r\n  //queue to hold methods called while\r\n  //xhrs are in progress\r\n  this._methodQueue=[];\r\n\r\n  /**\r\n   * Flag used to determine if the library is\r\n   * waiting for an xhr to return. \r\n   */\r\n  this._pendingXhr = false;\r\n\r\n  //defintion \r\n  if(opts.definition){\r\n    //is it an object or string(assumed to be url)\r\n    if(typeof opts.definition === 'object'){\r\n      //hold onto the definition\r\n      this._definition = opts.definition;\r\n    }else if(typeof opts.definition === 'string' ){ \r\n      //assume it's a url (relative or abs) and fetch the definition object\r\n      this._pendingXhr = true;\r\n      Cedar.getJson(opts.definition, function(err,data){\r\n        self._pendingXhr = false;\r\n        self._definition = data; \r\n        self._purgeMethodQueue();\r\n      });\r\n    }else{\r\n      throw new Error('parameter definition must be an object or string (url)');\r\n    }\r\n  }\r\n\r\n  if(opts.override) {\r\n    this._definition.override = opts.override;\r\n  }\r\n\r\n  //template\r\n  if(opts.specification){\r\n    //is it an object or string(assumed to be url)\r\n    if(typeof opts.specification === 'object'){\r\n      //hold onto the template\r\n      this._definition.specification = opts.specification;\r\n\r\n    }else if(typeof opts.specification === 'string' ){ \r\n      //assume it's a url (relative or abs) and fetch the template object\r\n      this._pendingXhr = true;\r\n      Cedar.getJson(opts.specification, function(err,data){\r\n        self._pendingXhr = false;\r\n        self._definition.specification = data; \r\n        self._purgeMethodQueue();\r\n      });\r\n    }else{\r\n      throw new Error('parameter template must be an object or string (url)');\r\n    }\r\n  }\r\n\r\n  //allow a dataset to be passed in...\r\n  if(opts.dataset && typeof opts.dataset === 'object'){\r\n    opts.dataset.query = Cedar._mixin({}, Cedar._defaultQuery(), opts.dataset.query);\r\n    //assign it\r\n    this._definition.dataset = opts.dataset;\r\n  }\r\n\r\n  /**\r\n   * Properties\r\n   *\r\n   * ES 5.1 syntax, so IE 8 & lower won't work\r\n   * \r\n   * If the val is a url, should we expect\r\n   * cedar to fetch the object? \r\n   * \r\n   * I'd say no... as that violates the principal \r\n   * of least suprise. Also - cedar has a .getJSON\r\n   * helper method the dev should use.\r\n   * \r\n   */\r\n      \r\n  Object.defineProperty(this, 'dataset', {\r\n    get: function() {\r\n        return this._definition.dataset;\r\n    },\r\n    set: function(val) {\r\n       this._definition.dataset = val;\r\n    }\r\n  });\r\n\r\n  Object.defineProperty(this, 'specification', {\r\n    get: function() {\r\n        return this._definition.specification;\r\n    },\r\n    set: function(val) {\r\n      this._definition.specification = val;\r\n    }\r\n  });\r\n\r\n  Object.defineProperty(this, 'override', {\r\n    get: function() {\r\n        return this._definition.override;\r\n    },\r\n    set: function(val) {\r\n      this._definition.override = val;\r\n    }\r\n  });  \r\n\r\n};\r\n\r\n\r\n/**\r\n * Inspect the current state of the object\r\n * and determine if we have sufficient information\r\n * to render the chart\r\n * @return {object} Hash of the draw state + any missing requirements\r\n */\r\nCedar.prototype.canDraw = function(){\r\n\r\n  //dataset?\r\n  //dataset.url || dataset.data?\r\n  //dataset.mappings?\r\n  //specification?\r\n  //specification.template?\r\n  //specification.inputs?\r\n  //specification.inputs ~ dataset.mappings?\r\n  \r\n  return {drawable:true, errs:[]};\r\n\r\n};\r\n\r\n/**\r\n * Render a chart in the specified element\r\n * @param  {object} options \r\n * \r\n * options.elementId [required] Id of the Dom element into which the chart will be rendered\r\n * options.token     [optional] Token to be used if the data or spec are on a secured server\r\n */\r\nCedar.prototype.show = function(options){\r\n  if(this._pendingXhr){\r\n    \r\n    this._addToMethodQueue('show', [options]);\r\n\r\n  }else{\r\n\r\n    var err;\r\n    //ensure we got an elementId\r\n    if( !options.elementId ){\r\n      err= \"Cedar.show requires options.elementId\";\r\n    }\r\n    //check if element exists in the page\r\n    if(d3.select(options.elementId)[0][0] === null){\r\n      err = \"Element \" + options.elementId + \" is not present in the DOM\";\r\n     }\r\n  \r\n    //hold onto the id\r\n    this._elementId = options.elementId;\r\n    this._renderer = options.renderer || \"canvas\"; //default to canvas\r\n    this.width = options.width || undefined; // if not set in API, always base on current div size\r\n    this.height = options.height || undefined;\r\n\r\n    //hold onto the token\r\n    if(options.token){\r\n      this._token = options.token;\r\n    }\r\n\r\n    if( err ){\r\n      throw new Error( err );\r\n    }\r\n    var chk = this.canDraw();\r\n    if(chk.drawable){\r\n      //update centralizes the spec compilation & drawing\r\n      this.update();  \r\n    }else{\r\n      //report the issues\r\n      var errs = chk.issues.join(',');\r\n      throw new Error('Chart can not be drawn because: ' + errs);  \r\n    }\r\n    \r\n  }\r\n};\r\n\r\n/**\r\n * Render the chart using the internal state\r\n * Should be called after a user modifies the \r\n * of the dataset, query, mappings or template\r\n */\r\nCedar.prototype.update = function(){\r\n  var self = this;\r\n  \r\n  if ( this._view ) { \r\n    this.emit('update-start');\r\n  }\r\n\r\n  if(this._pendingXhr){\r\n    \r\n    this._addToMethodQueue('update');\r\n\r\n  }else{\r\n\r\n    if(this._view){\r\n      //remove handlers\r\n      //TODO Remove existing handlers\r\n      this._remove(this._view);\r\n    }\r\n    try{\r\n      //ensure we have required inputs or defaults \r\n      var compiledMappings = Cedar._applyDefaultsToMappings(this._definition.dataset.mappings, this._definition.specification.inputs); //Cedar._compileMappings(this._definition.dataset, this._definition.specification.inputs);\r\n\r\n      var queryFromSpec = Cedar._mixin({}, this._definition.specification.query, this._definition.dataset.query);\r\n      queryFromSpec = JSON.parse(Cedar._supplant(JSON.stringify(queryFromSpec), compiledMappings));\r\n\r\n      //allow binding to query properties\r\n      compiledMappings.query = queryFromSpec;\r\n\r\n      //compile the template + mappings --> vega spec\r\n      var spec = JSON.parse(Cedar._supplant(JSON.stringify(this._definition.specification.template), compiledMappings)); \r\n\r\n      // merge in user specified style overrides\r\n      spec = Cedar._mergeRecursive(spec, this._definition.override);\r\n\r\n      //if the spec has a url in the data node, delete it\r\n      if(spec.data[0].url){\r\n        delete spec.data[0].url;\r\n      }\r\n\r\n      if(this._definition.dataset.data){\r\n\r\n        //create the data node using the passed in data\r\n        spec.data[0].values = this._definition.dataset.data;\r\n        \r\n        //send to vega\r\n        this._renderSpec(spec);\r\n      \r\n      }else{\r\n      \r\n        //we need to fetch the data so\r\n        var url = Cedar._createFeatureServiceRequest(this._definition.dataset, queryFromSpec);\r\n      \r\n        //create a callback closure to carry the spec\r\n        var cb = function(err,data){\r\n      \r\n          //todo add error handlers for xhr and ags errors\r\n          spec.data[0].values = data;\r\n          console.dir(spec);\r\n          //send to vega\r\n          self._renderSpec(spec);\r\n\r\n        };\r\n\r\n        //fetch the data from the service\r\n        Cedar.getJson(url, cb);\r\n      }\r\n    }\r\n    catch(ex){\r\n      throw(ex);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Render a fully cooked spec\r\n */\r\nCedar.prototype._renderSpec = function(spec){\r\n  var self = this;\r\n  try{\r\n    //use vega to parse the spec \r\n    //it will handle the spec as an object or url\r\n    vg.parse.spec(spec, function(chartCtor) { \r\n\r\n      //create the view\r\n      self._view = chartCtor({\r\n        el: self._elementId,\r\n        renderer: self._renderer\r\n      });\r\n\r\n      \r\n      var width = self.width || parseInt(d3.select(self._elementId).style('width')) || 500;\r\n      var height = self.height || parseInt(d3.select(self._elementId).style('height')) || 500;\r\n\r\n      //render into the element\r\n      self._view.width(width).height(height).update(); \r\n\r\n      //attach event proxies\r\n      self._attach(self._view);\r\n\r\n      if ( self._view ) { \r\n        self.emit('update-end');\r\n      }\r\n\r\n    });\r\n  }\r\n  catch(ex){\r\n    throw(ex);\r\n  }\r\n};\r\n\r\n/**\r\n * highlight marker based on attribute value\r\n */\r\nCedar.prototype.select = function( opt ) {\r\n  var self = this;\r\n  var view = this._view;\r\n  var items = view.model().scene().items[0].items[0].items;\r\n\r\n  items.forEach(function(item) {\r\n    if ( item.datum.data.attributes[opt.key] === opt.value ) {\r\n      if ( item.hasPropertySet(\"hover\") ) {\r\n        self._view.update({props:\"hover\", items:item});\r\n      }\r\n    }\r\n  });\r\n\r\n};\r\n\r\n\r\n/**\r\n * highlight marker based on attribute value\r\n */\r\nCedar.prototype.clearSelection = function( opt ) {\r\n  var self = this;\r\n  var view = this._view;\r\n  var items = view.model().scene().items[0].items[0].items;\r\n\r\n  if ( opt && opt.key ) {\r\n    items.forEach(function(item) {\r\n      if ( item.datum.data.attributes[opt.key] === opt.value ) {\r\n        self._view.update({props:\"update\", items:item});\r\n      }\r\n    });\r\n  } else {\r\n    //clear all \r\n    self._view.update();\r\n  }\r\n\r\n};\r\n\r\n\r\n// trigger callback \r\nCedar.prototype.emit = function(eventName) {\r\n  if (this._view._handler._handlers[ eventName ] && this._view._handler._handlers[ eventName ][0] !== undefined){\r\n    this._view._handler._handlers[ eventName ][0].handler();\r\n  }\r\n};\r\n\r\n/**\r\n * Attach the generic proxy handlers to the chart view\r\n */\r\nCedar.prototype._attach = function(view){\r\n  \r\n  view.on('mouseover', this._handler('mouseover'));\r\n  view.on('mouseout', this._handler('mouseout'));\r\n  view.on('click', this._handler(\"click\"));\r\n  view.on('update-start', this._handler('update-start'));\r\n  view.on('update-end', this._handler('update-end'));\r\n  \r\n};\r\n\r\n/**\r\n * Remove all event handlers from the view\r\n */\r\nCedar.prototype._remove = function(view){\r\n\r\n  view.off('mouseover');\r\n  view.off('mouseout');\r\n  view.off('click');\r\n  view.off('update-start');\r\n  view.off('update-end');\r\n  \r\n};\r\n\r\n/**\r\n * Helper function that validates that the \r\n * mappings hash contains values for all\r\n * the inputs\r\n * @param  {array} inputs   Array of inputs\r\n * @param  {object} mappings Hash of mappings\r\n * @return {array}          Missing mappings\r\n */\r\nCedar._validateMappings = function(inputs, mappings){\r\n  var missingInputs = [], input;\r\n  for(var i=0;i<inputs.length;i++){\r\n    input = inputs[i];\r\n    if(input.required){\r\n      if(!mappings[input.name]){\r\n        missingInputs.push(input.name);\r\n      }\r\n    }\r\n  }\r\n  return missingInputs;\r\n};\r\n\r\n/**\r\n * Validate that the incoming data has the fields expected\r\n * in the mappings\r\n */\r\nCedar._validateData = function(data, mappings){\r\n  var missingInputs = [];\r\n  if(!data.features || !Array.isArray(data.features)){\r\n    throw new Error('Data is expected to have features array!');\r\n  }\r\n  var firstRow = data.features[0].attributes;\r\n  for(var key in mappings){\r\n    var fld = Cedar._getMappingFieldName(key, mappings[key].field);\r\n    if(!firstRow.hasOwnProperty(fld)){\r\n      missingInputs.push(fld);\r\n    }\r\n  }\r\n  return missingInputs;\r\n};\r\n\r\n/**\r\n * Centralize and abstract the computation of\r\n * expected field names, based on the mapping name\r\n */\r\nCedar._getMappingFieldName = function(mappingName, fieldName){\r\n  var name = fieldName;\r\n  //if(mappingName.toLowerCase() === 'count'){\r\n  //  name = fieldName + '_SUM';\r\n  //}\r\n  return name;\r\n};\r\n\r\n/**\r\n * Return a default definition object\r\n */\r\nCedar._defaultDefinition = function(){\r\n  var defn = {\r\n    \"dataset\": {\r\n      \"query\": this._defaultQuery()\r\n    },\r\n    \"template\":{}\r\n  };\r\n\r\n  defn.dataset.query = Cedar._defaultQuery();\r\n\r\n  return defn;\r\n};\r\n\r\n/**\r\n * Default Query Object\r\n */\r\nCedar._defaultQuery = function(){\r\n  var defaultQuery = {\r\n    \"where\": \"1=1\",\r\n    \"returnGeometry\": false,\r\n    \"returnDistinctValues\": false,\r\n    \"returnIdsOnly\": false,\r\n    \"returnCountOnly\": false,\r\n    \"outFields\": \"*\",\r\n    \"f\": \"json\"\r\n  };\r\n  return defaultQuery;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Generic event handler proxy\r\n */\r\nCedar.prototype._handler = function(evtName) {\r\n  var self = this;\r\n  \r\n  //return a handler function w/ the events hash closed over\r\n  var handler = function(evt, item){\r\n    self._events.forEach( function(registeredHandler){\r\n      if(registeredHandler.type === evtName){\r\n        //invoke the callback with the data\r\n        if ( item ) {\r\n          registeredHandler.callback(evt, item.datum.data.attributes);\r\n        } else {\r\n          registeredHandler.callback(evt,null);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  return handler;\r\n};\r\n\r\n/**\r\n * Add a handler for the named event\r\n */\r\nCedar.prototype.on = function(evtName, callback){\r\n  this._events.push({\"type\":evtName, \"callback\":callback});\r\n};\r\n\r\n/**\r\n * Remove a handler for the named event\r\n */\r\nCedar.prototype.off = function(evtName /*, callback */){\r\n  console.log('Handler for ' + evtName +' removed...');\r\n};\r\n\r\n\r\n/**\r\n * Creates an entry in the method queue, excuted \r\n * once a pending xhr is completed \r\n */\r\nCedar.prototype._addToMethodQueue = function(name, args){\r\n  this._methodQueue.push({ method: name, args: args });\r\n};\r\n\r\n/**\r\n * empties the method queue by calling the queued methods\r\n * This helps build a more syncronous api, while still\r\n * doing async things in the code\r\n */\r\nCedar.prototype._purgeMethodQueue = function(){\r\n  var self = this;\r\n  if(self._methodQueue.length > 0){\r\n\r\n    for(var i=0;i<self._methodQueue.length;i++){\r\n      var action = self._methodQueue[i];\r\n      self[action.method].apply(self, action.args);  \r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * fetch json from a url\r\n * @param  {string}   url      Url to json file\r\n * @param  {Function} callback node-style callback function (err, data)\r\n */\r\nCedar.getJson = function( url, callback ){\r\n  d3.json(url, function(err,data) {\r\n    if(err){\r\n      callback('Error loading ' + url + ' ' + err.message);\r\n    }\r\n    callback(null, data);\r\n  });\r\n};\r\n\r\n\r\nCedar._mixin = function(source) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        d3.entries(arguments[i]).forEach(function(p) {\r\n            source[p.key] = p.value;\r\n        });\r\n    }\r\n    return source;\r\n};\r\n\r\n/**\r\n * Given a dataset hash, create the feature service\r\n * query string\r\n */\r\nCedar._createFeatureServiceRequest = function( dataset, queryFromSpec ) {\r\n  var mergedQuery = Cedar._mixin({}, Cedar._defaultQuery(), queryFromSpec);\r\n\r\n  //Handle bbox\r\n  if(mergedQuery.bbox){\r\n    //make sure a geometry was not also passed in\r\n    if(mergedQuery.geometry){\r\n      throw new Error('Dataset.query can not have both a geometry and a bbox specified');\r\n    }\r\n    //get the bbox (W,S,E,N)\r\n    var bboxArr = mergedQuery.bbox.split(',');\r\n\r\n    //remove it so it's not serialized as-is\r\n    delete mergedQuery.bbox;\r\n\r\n    //cook it into a json string \r\n    mergedQuery.geometry = JSON.stringify({\"xmin\": bboxArr[0], \"ymin\": bboxArr[2],\"xmax\": bboxArr[1], \"ymax\": bboxArr[3] });\r\n    //set the spatial ref as geographic\r\n    mergedQuery.inSR = '4326';\r\n  }\r\n  if(!mergedQuery.groupByFieldsForStatistics && dataset.mappings.group) {\r\n      mergedQuery.groupByFieldsForStatistics = dataset.mappings.group.field;\r\n  }\r\n  if(!mergedQuery.outStatistics && dataset.mappings.count) {\r\n    mergedQuery.orderByFields = dataset.mappings.count.field + \"_SUM\";\r\n    mergedQuery.outStatistics = JSON.stringify([{\"statisticType\": \"sum\", \"onStatisticField\": dataset.mappings.count.field, \"outStatisticFieldName\": dataset.mappings.count.field + \"_SUM\"}]);\r\n  }\r\n\r\n\r\n\r\n  //iterate the mappings keys to check for sort\r\n  //-----------------------------------------------------------------\r\n  //This approach would seem 'clean' but if there are multiple fields\r\n  //to sort by, the order would be determined by how javascript decides to\r\n  //iterate the mappings property hash.\r\n  //Thus, using mappings.sort gives the developer explicit control\r\n  //-----------------------------------------------------------------\r\n  // var sort = [];\r\n  // for (var property in dataset.mappings) {\r\n  //   if (dataset.mappings.hasOwnProperty(property)) {\r\n  //     if(dataset.mappings[property].sort){\r\n  //       //ok - build up the sort\r\n  //       sort.push(dataset.mappings[property].field + ' ' + dataset.mappings[property].sort);\r\n  //     }\r\n  //   }\r\n  // }\r\n  // if(sort.length > 0){\r\n  //   mergedQuery.orderByFields = sort.join(',');\r\n  // }\r\n  //-----------------------------------------------------------------\r\n  //check for a sort passed directly in\r\n  if(dataset.mappings.sort){\r\n    mergedQuery.orderByFields = dataset.mappings.sort;\r\n  }\r\n\r\n  var url = dataset.url + \"/query?\" + this._serializeQueryParams(mergedQuery);\r\n  \r\n  if(dataset.token){\r\n    url = url + '&token=' + dataset.token;\r\n  }\r\n  \r\n  return url;\r\n};\r\n\r\nCedar._applyDefaultsToMappings = function(mappings, inputs){\r\n  var errs = [];\r\n  //loop over the inputs\r\n  for(var i =0; i < inputs.length; i++){\r\n    //get the input\r\n    var input = inputs[i];\r\n\r\n    //if it's required and not in the mappings, add an exception\r\n    if(input.required && !mappings[input.name] ){\r\n      errs.push(input.name);\r\n    }\r\n    \r\n    //if it's not required, has a default and not in the mappings\r\n    if(!input.required && !mappings[input.name] && input.default){\r\n      //add the default\r\n      mappings[input.name] = input.default;\r\n    }\r\n  }\r\n\r\n  if(errs.length > 0){\r\n    throw new Error('Required Mappings Missing: ' + errs.join(','));\r\n  }else{\r\n    return mappings;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Token Replacement on a string\r\n * @param  {string} template string template\r\n * @param  {object} params   object hash that maps to the tokens to be replaced\r\n * @return {string}          string with values replaced\r\n */\r\nCedar._supplant = function( tmpl, params ){\r\n  return tmpl.replace(/{([^{}]*)}/g,\r\n    function (a, b) {\r\n      var r = Cedar._getTokenValue(params, b);\r\n      return typeof r === 'string' || typeof r === 'number' ? r : a;\r\n    }\r\n  );\r\n};\r\n\r\n/*\r\n* Recursively merge properties of two objects \r\n*/\r\nCedar._mergeRecursive = function(obj1, obj2) {\r\n  for (var p in obj2) {\r\n    try {\r\n      // Property in destination object set; update its value.\r\n      if ( obj2[p].constructor===Object || obj2[p].constructor===Array) {\r\n        obj1[p] = Cedar._mergeRecursive(obj1[p], obj2[p]);\r\n\r\n      } else {\r\n        obj1[p] = obj2[p];\r\n\r\n      }\r\n\r\n    } catch(e) {\r\n      // Property in destination object not set; create it and set its value.\r\n      obj1[p] = obj2[p];\r\n\r\n    }\r\n  }\r\n\r\n  return obj1;\r\n};\r\n\r\n/**\r\n * Get the value of a token from a hash\r\n * @param  {[type]} tokens    [description]\r\n * @param  {[type]} tokenName [description]\r\n * @return {[type]}           [description]\r\n * Pulled from gulp-token-replace (MIT license)\r\n * https://github.com/Pictela/gulp-token-replace/blob/master/index.js\r\n * \r\n */\r\nCedar._getTokenValue = function(tokens, tokenName) {\r\n  var tmpTokens = tokens;\r\n  var tokenNameParts = tokenName.split('.');\r\n  for (var i = 0; i < tokenNameParts.length; i++) {\r\n    if (tmpTokens.hasOwnProperty(tokenNameParts[i])) {\r\n      tmpTokens = tmpTokens[tokenNameParts[i]];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return tmpTokens;\r\n};\r\n\r\n/**\r\n * Serilize an object into a query string\r\n * @param  {object} params Params for the query string\r\n * @return {string}        query string\r\n */\r\nCedar._serializeQueryParams = function(params) {\r\n  var str = [];\r\n  for(var p in params){\r\n    if (params.hasOwnProperty(p)) {\r\n      var val = params[p];\r\n      if (typeof val !== \"string\") {\r\n          val = JSON.stringify(val);\r\n      }\r\n      str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(val));\r\n    }\r\n  }\r\n  var queryString = str.join(\"&\");\r\n  return queryString;\r\n};\r\n\r\n  return Cedar;\r\n}));\r\n"]}